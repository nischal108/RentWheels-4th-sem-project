generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../ERD.png"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  phone     String    @unique
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  fullName  String
  bookings  Booking[]
  reviews   Review[]
  vehicles  Vehicle[]
  Payment   Payment[]
}

model Vehicle {
  id                Int                @id @default(autoincrement())
  ownerId           Int
  name              String
  type              String
  seater            Int
  transmission      Transmission
  pricePerDay       Float
  available         Boolean            @default(true)
  driverAvailable   Boolean            @default(false)
  approved          Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  image             String?
  availabilitySlots AvailabilitySlot[]
  bookings          Booking[]
  documents         Document[]
  reviews           Review[]
  owner             User               @relation(fields: [ownerId], references: [id])

  @@index([ownerId], map: "Vehicle_ownerId_fkey")
}

model AvailabilitySlot {
  id           Int       @id @default(autoincrement())
  vehicleId    Int
  dayOfWeek    String? // Nullable to allow specific dates
  startTime    String
  endTime      String
  specificDate DateTime? // Optional for one-time slots
  recurring    Boolean
  vehicle      Vehicle   @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], map: "AvailabilitySlot_vehicleId_fkey")
}

model Booking {
  id              String        @id @default(uuid())
  renterId       Int
  vehicleId      Int
  startDate      DateTime
  endDate        DateTime
  totalPrice     Float
  driverRequired Boolean       @default(false)
  paymentId      Int?          @unique
  renter         User          @relation(fields: [renterId], references: [id])
  vehicle        Vehicle       @relation(fields: [vehicleId], references: [id])
  payment        Payment?
  status         BookingStatus @default(CONFIRMED)

  @@index([renterId], map: "Booking_renterId_fkey")
  @@index([vehicleId], map: "Booking_vehicleId_fkey")
}

model Payment {
  id              Int           @id @default(autoincrement())
  userId          Int
  bookingId       String           @unique
  amount          Float
  status          PaymentStatus
  purchaseOrderId String        @unique
  transactionId   String?
  pidx            String?
  paymentUrl      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  booking         Booking       @relation(fields: [bookingId], references: [id])

  @@index([userId], map: "Payment_userId_fkey")
  @@index([bookingId], map: "Payment_bookingId_fkey")
}

model Document {
  id        Int     @id @default(autoincrement())
  vehicleId Int
  type      String
  fileUrl   String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], map: "Document_vehicleId_fkey")
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  vehicleId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([userId], map: "Review_userId_fkey")
  @@index([vehicleId], map: "Review_vehicleId_fkey")
}

enum Role {
  USER
  OWNER
  ADMIN
}

enum Transmission {
  MANUAL
  AUTOMATIC
}

enum BookingStatus {
  CANCELLED
  PENDING
  CONFIRMED
  COMPLETED
  EXPIRED
  PAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
